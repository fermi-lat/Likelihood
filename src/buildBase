# -*- python -*-
import os, glob

Import('home', 'package', 'apps', 'libraries', 'cflags', 'rootlibs')

bindir = os.environ['BINDIR']
install_dir = os.path.join(home, bindir)

include_dirs = [home, os.path.join(home, 'src')]
library_dirs = [os.path.join(home, bindir)]
for lib in libraries.keys():
    if libraries[lib] is None:
        # remove ugly Lib kluge
        lib = lib.split('Lib')[0]
        include_dirs.append(os.environ[lib.upper() + 'ROOT'])
        library_dirs.append(os.path.join(os.environ[lib.upper() + 'ROOT'],
                                         os.environ['BINDIR']))
    else:
        include_dirs.append(libraries[lib][0])
        library_dirs.append(libraries[lib][1])

SourceSignatures('timestamp')

src_files = glob.glob(os.path.join(home, 'src', '*.cxx'))
src_files.extend(glob.glob(os.path.join(home, 'src', '*.c')))

libNames = libraries.keys()
libNames.insert(0, package)
libNames.remove('f2c')
libNames.append('pthread')
libNames.extend(rootlibs)

env = Environment(CCFLAGS='-g -pedantic' + cflags)
library = env.Library(package, src_files, CPPPATH=include_dirs)

test_app = ''.join(('test_', package, '.exe'))
test_app_files = glob.glob(os.path.join(home, 'src', 'test', '*.cxx'))
test_program = env.Program(test_app, test_app_files, CPPPATH=include_dirs,
                           LIBS=libNames, LIBPATH=library_dirs)

appList = []
for app in apps:
    files = glob.glob(os.path.join(home, 'src', app, '*.cxx'))
    appList.append(env.Program(app + '.exe', files,  CPPPATH=include_dirs,
                               LIBS=libNames, LIBPATH=library_dirs))
appList.extend([library, test_program])

env.Install(install_dir, appList)
env.Alias('install', install_dir)
Default('install')
